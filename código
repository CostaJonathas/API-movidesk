import requests
import pandas as pd
import os
from datetime import datetime
import pytz

# Converte data no formato UTC da API para o fuso horário de Brasília e com formato legível
def converter_data(api_data):
    formato_api = "%Y-%m-%dT%H:%M:%S"
    try:
        # Remove milissegundos, se existirem
        api_data = api_data.split('.')[0]
        
        # Interpreta a data como UTC
        data_utc = datetime.strptime(api_data, formato_api)
        data_utc = data_utc.replace(tzinfo=pytz.UTC)

        # Converte para o fuso horário de Brasília
        fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
        data_brasilia = data_utc.astimezone(fuso_horario_brasilia)

        # Formata a data no padrão brasileiro
        formato_desejado = "%d-%m-%Y %H:%M:%S"
        data_formatada = data_brasilia.strftime(formato_desejado)

        return data_formatada
    except Exception as e:
        print(f"Erro ao converter a data {api_data}: {e}")
        return None

# Extrai o nome da empresa do ticket, verificando em múltiplos níveis da estrutura JSON
def obter_nome_empresa(item):
    try:
        # Verifica se existe o campo 'clients' e se ele não está vazio
        if 'clients' in item and item['clients']:
            clients = item['clients']
            
            # Prioriza pegar a razão social da organização, se disponível
            for client in clients:
                if 'organization' in client and client['organization']:
                    organization = client['organization']
                    if 'businessName' in organization and organization['businessName']:
                        return organization['businessName']

            # Caso não haja organização, tenta pegar o nome direto do client
            for client in clients:
                if 'businessName' in client and client['businessName']:
                    return client['businessName']

        return None
    except Exception as e:
        print(f"Erro ao obter o nome da empresa: {e}")
        return None

# URLs da API Movidesk (1 por empresa ou cliente) com filtros e seleções definidos
urls = [
    "https://api.movidesk.com/public/v1/tickets?token={Insira seu token aqui}&$select=baseStatus,subject,cc,type,urgency,category,protocol,createdDate&$expand=actions($select=description),owner($select=businessName),createdBy($select=businessName),clients($expand=organization($select=businessName))&$filter=baseStatus eq 'New' or baseStatus eq 'InAttendance' or baseStatus eq 'Stopped'",
    "https://api.movidesk.com/public/v1/tickets?token={Insira seu token aqui}&$select=baseStatus,subject,cc,type,urgency,category,protocol,createdDate&$expand=actions($select=description),owner($select=businessName),createdBy($select=businessName),clients($expand=organization($select=businessName))&$filter=baseStatus eq 'New' or baseStatus eq 'InAttendance' or baseStatus eq 'Stopped'",
    "https://api.movidesk.com/public/v1/tickets?token={Insira seu token aqui}&$select=baseStatus,subject,cc,type,urgency,category,protocol,createdDate&$expand=actions($select=description),owner($select=businessName),createdBy($select=businessName),clients($expand=organization($select=businessName))&$filter=baseStatus eq 'New' or baseStatus eq 'InAttendance' or baseStatus eq 'Stopped'"
]

# Nome de cada aba da planilha, correspondente à URL acima
sheet_names = ["Empresa1", "Empresa2", "Empresa3"]

# Caminho de destino do arquivo Excel que será gerado
excel_file_path = "Caminho que desejar salvar o arquivo"

# Inicia escrita no arquivo Excel com múltiplas abas
with pd.ExcelWriter(excel_file_path, engine="openpyxl", mode="w") as writer:
    # Itera sobre as URLs e nomes de abas simultaneamente
    for i, url in enumerate(urls):
        headers = {
            "Authorization": f"Bearer Token{i+1}",  # Token específico de cada empresa
            "Content-Type": "application/json"
        }

        # Requisição GET à API Movidesk
        response = requests.get(url, headers=headers)

        # Se a requisição for bem-sucedida
        if response.status_code == 200:
            data = response.json()

            result = []  # Lista para armazenar cada linha da planilha

            # Processa cada ticket retornado pela API
            for item in data:
                data_formatada = converter_data(item['createdDate'])  # Converte data de criação
                nome_empresa = obter_nome_empresa(item)  # Obtém nome da empresa cliente

                # Organiza os dados em um dicionário (linha da planilha)
                entry = {
                    'Data de criação': data_formatada,
                    'Empresa': nome_empresa,
                    'urgência': item['urgency'],
                    'Status': item['baseStatus'],
                    'tipo': item['type'],
                    'Assunto': item['subject'],
                    'categoria': item['category'],
                    'protocolo': item['protocol'],
                    'Agente': item['owner']['businessName'] if item['owner'] else None,
                    'Cliente': item['createdBy']['businessName'] if item['createdBy'] else None,
                    'Ações': item['actions'][0]['description'] if item['actions'] else None,
                    'Cópia': item['cc'],
                }

                result.append(entry)  # Adiciona ao conjunto de resultados

            # Converte a lista de dicionários em DataFrame e escreve na aba correspondente
            df = pd.DataFrame(result)
            df.to_excel(writer, sheet_name=sheet_names[i], index=False)

            print(f"Dados da URL {i+1} salvos em '{excel_file_path}', aba: {sheet_names[i]}")
        else:
            print(f"Erro {response.status_code} na URL {i+1}: {response.text}")
